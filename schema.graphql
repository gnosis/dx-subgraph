type Auction @entity {
  id: ID! #identified by sellToken - buyToken + auctionIndex [String]
  sellToken: Bytes
  buyToken: Bytes
  sellVolume: BigInt
  buyVolume: BigInt!
  auctionIndex: BigInt
  cleared: Boolean
  startTime: BigInt
  clearingTime: BigInt
  tokenPair: TokenPair
  totalFeesPaid: BigInt
  traders: [Trader!]
  sellOrders: [SellOrder!] @derivedFrom(field: "auction")
  buyOrders: [BuyOrder!] @derivedFrom(field: "auction")
}

type Trader @entity {
  id: ID! # Address
  sellOrders: [SellOrder!] @derivedFrom(field: "trader")
  buyOrders: [BuyOrder!] @derivedFrom(field: "trader")
  tokenPairsParticipated: [TokenPair!] @derivedFrom(field: "traders")
  tokensParticipated: [Token!] @derivedFrom(field: "traders")
#  tokenAuctionBalances: [TokenAuctionBalance!] @derivedFrom(field: "trader")
  firstParticipation: BigInt
  lastActive: BigInt
  totalFrts: BigInt
}

type SellOrder @entity {
  id: ID! # identified by the  H(transaction hash + SellToken + amount)
  auction: Auction!
  tokenPair: TokenPair!
  trader: Trader
  amount: BigInt!
  timestamp: BigInt!
  transactionHash: Bytes!
}

type BuyOrder @entity {
  id: ID! # identified by the  H(transaction hash + BuyToken [String] + amount)
  auction: Auction!
  tokenPair: TokenPair!
  trader: Trader
  amount: BigInt!
  timestamp: BigInt!
  transactionHash: Bytes!
}

type TokenPair @entity {
  id: ID! # identified by the sell address + buy address [Sring]
  token1: Bytes!
  token2: Bytes!
  latestStartTime: BigInt
  latestClearTime: BigInt
  auctions: [Auction!] @derivedFrom(field: "tokenPair")
  traders: [Trader!]
  currentAuctionIndex: BigDecimal 
  listingTimestamp: BigInt
  listingTransactionHash: Bytes
}

type Token @entity {
  id: ID! #Token Address 
  sellOrders: [SellOrder!]!
  buyOrders: [BuyOrder!]!
  traders: [Trader!]!
  tokenPairs: [TokenPair!]! 
  whitelisted: Boolean!
}

# type TokenBalance @entity {
#   id: ID! # identified by Trader + Token 
#   trader: Trader
#   token: Token
#   totalDeposited: BigInt
#   totalWithdrawn: BigInt
#   balance: BigInt
# }

# type TokenAuctionBalance @entity {
#   id: ID! # Identified by Trader + Auction [String]
#   trader: Trader
#   auction: Auction
#   sellTokenBalance: BigInt
#   buyTokenBalance: BigInt
#   totalFeesPaid: BigInt
# }

# type Deposit @entity {
#   id: ID! # Identified by H(transaction hash + Token + amount)
#   trader: Trader!
#   token: Token!
#   amount: BigInt
#   timestamp: BigInt
#   transactionHash: Bytes
# }

# type Withdrawal @entity {
#   id: ID! # Identified by H(transaction hash + Token + amount)
#   trader: Trader!
#   token: Token!
#   amount: BigInt
#   timestamp: BigInt
#   transactionHash: Bytes
# }
